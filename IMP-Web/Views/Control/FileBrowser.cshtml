@model IMP_Web.Models.ViewModels.FileBrowserViewModel
@{
	Layout = null;
}

<!DOCTYPE html>




<html>
<head>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>
	<script src="~/Scripts/jquery-3.1.1.min.js"></script>
	<script src="~/Scripts/bootstrap.js"></script>
	<script src="~/Scripts/FileBrowser.js"></script>
	<script src="~/Scripts/jquery.nicescroll.js"></script>


	<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js"></script>
	<script src="~/Scripts/knockout.punches.min.js"></script>
	<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
	<script src="~/Scripts/jquery.contextMenu.min.js"></script>

	<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
	<script src="http://94.209.146.117:99/signalr/hubs"></script>
	<script src="~/Scripts/SignalRHubs/FileManageHub.js"></script>
	<script src="~/Scripts/sweetalert2.min.js"></script>


	<link href="~/Content/sweetalert2.min.css" rel="stylesheet" />
	<link href="~/Content/jquery.contextMenu.min.css" rel="stylesheet" />
	<link href="~/Content/IMP.css" rel="stylesheet" />
	<link href="~/Content/FileBrowser.css" rel="stylesheet" />
	<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
	@*<link href="https://cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css" rel="stylesheet" />*@
	<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
	<link href="~/Content/font-awesome.min.css" rel="stylesheet" />



	<meta name="viewport" content="width=device-width" />
	<title>FileBrowser - @Model.Client.SystemInfo.MachineName</title>
</head>
<body>
	<div id="status-dialog" class="invisible">
			{{ viewModel.Client().Username }} is offline
	</div>
	<div class="container-fluid">
		<div id="header" class="row dropshadow">
			<div class="col-sm-12">
				<input id="currentDirectoryViewer" type="text" value="{{ viewModel.CurrentDirectory() }}" />
			</div>
		</div>
		<div id="content">
			<table class="table">
				<thead>
					<tr class="dropshadow">
						<th id="parent-directory-button"><i class="fa fa-level-up" aria-hidden="true"></i></th>
						<th>Name</th>
						<th>Size</th>
						<th>Last modified</th>
					</tr>
				</thead>
				<tbody data-bind="foreach: DirectoryItems"> 
					<tr class="windows-item" data-bind="attr: { id: Path }, event: { dblclick: browseDirectory.bind($data, Path, Type) }">
						<th>
							<i aria-hidden="true" data-bind="attr: { class: getItemIcon(Type) }"></i>
						</th>
						<td data-bind="text: Name"></td>
						<td data-bind="text: getFriendlySize(Type, Size)"></td>
						<td data-bind="text: getFriendlyDate(LastModified)"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
	<div id="filetransfers" class="hide-filetransfers dropshadow">
		<table class="table">
			<thead>
				<tr class="dropshadow">
					<th id="filetransfer-button"><i class="fa fa-exchange" aria-hidden="true"></i></th>
					<th>Filename</th>
					<th>Progress</th>
					<th>Started at</th>
				</tr>
			</thead>
			<tbody data-bind="foreach: FileTransfers">
				<tr class="file-transfer-item">
					<th>
						<i aria-hidden="true" data-bind="css: getTransferTypeIcon(TransferType)"></i>
					</th>
					<td data-bind="text: FileName"></td>
					<td>
						<div class="progress">
							<div class="progress-bar" role="progressbar" aria-valuenow="70"
								 aria-valuemin="0" aria-valuemax="100" data-bind="style: { width: FriendlyProgress }">                                
							</div>
						</div>
					</td>
					<td data-bind="text: getFriendlyDate(StartTime)"></td>
				</tr>
			</tbody>
		</table>
	</div>
</body>
</html>


<script>
	var viewModel = {
		Client: ko.observable(@Html.Raw((IMP_Data.JSONSerializeExtensionMethods.Serialize<IMP_Lib.Models.Client>(Model.Client)))),
		DirectoryItems: ko.observable(),
		CurrentDirectory: ko.observable("@Model.Drive.TrimEnd(' ')"),
		FileTransfers: ko.observableArray()
	};

	var addFileTransfer = function (ft) {
		var observableFt =
			{
				TransferType: ft.TransferType,
				FileTransferID: ko.observable(ft.FileTransferID),
				FileName: ko.observable(ft.FileName),
				FriendlyProgress: ko.observable(ft.FriendlyProgress),
				StartTime: ft.StartTime
			};


		console.log(observableFt);
		viewModel.FileTransfers.push(observableFt);
	};
	


	viewModel.CurrentDirectory.subscribe(function (newValue) {
		if (newValue.length == 2)
			viewModel.CurrentDirectory(newValue + "\\");
	});


	var getItemIcon = function (itemType) {
		switch (itemType) 
		{
			case "File":
				return 'fa fa-file';
			case "Folder":
				return 'fa fa-folder';
		}
	}

	var getFriendlySize = function (type, bytes) {
		if (type == "File")
			return Math.round(bytes / 1024).toLocaleString() + " KB";
		else
			if (bytes == 1)
				return "";
			else
				return "(empty)";
	}

	var getFriendlyDate = function (date) {
		return new Date(date).toLocaleString();
	}

	var getFileName = function (path) {
		return path.split('\\').pop().split('/').pop();
	}

	var getTransferTypeIcon = function (transferType) {
		if (transferType == "UPLOAD")
			return 'fa fa-arrow-circle-up';
		else
			return 'fa fa-arrow-circle-down';
	};

	var browseDirectory = function (path, type) {
		if (type == "Folder" || type == null) {
			$.when(getDirectoryContent(viewModel.Client().ClientId, path)).done(function (result) {
				if (result.length > 0) {
					viewModel.DirectoryItems(JSON.parse(result));
					viewModel.CurrentDirectory(path);
                    $("tbody").hide();
                    $("tbody").fadeIn("fast");
				} else {
					swal("Access to directory denied");
				}
			});
		}
	}
	
	$("#parent-directory-button").click(function () {
		toParentDirectory();
	});

	$("#filetransfer-button").click(function () {
		$("#filetransfers").toggleClass("show-filetransfers").toggleClass("hide-filetransfers");
	});

	$(document).ready(function () {

		var isDragging = false;

		$("tbody").on("mousedown", ".windows-item", function (event) {
			if (event.button == 2)
				$(event.target).parent().addClass("selected");
			else
				$(event.target).parent().toggleClass("selected");
		});


		$("tbody").on("mousedown", ".windows-item", function (event) {
			isDragging = true;
		});

		$("tbody").on("mouseup", ".windows-item", function (event) {
			isDragging = false;
		});

		$("tbody").on("mouseenter", ".windows-item", function (event) {
			if (isDragging)
				$(event.target).parent().toggleClass("selected");
		});

		//Browse to specified path when ENTER is pressed
		$("#currentDirectoryViewer").keypress(function (event) {
			if (event.keyCode == 13) {
				var enteredPath = $(event.target).val();
				browseDirectory(enteredPath);
			}
        });

        $(document).keypress(function (e) {
            if (e.keyCode == 32) {
                refreshDirectory();
            }
        });

        $(document).keydown(function (e) {
            //Select all items with CTRL + A
			if (e.keyCode == 65 && e.ctrlKey) {
				e.preventDefault();
				$(".windows-item").toggleClass("selected");
            }
            //Deselect all items with escape
			if (e.keyCode == 27)
                $(".windows-item").removeClass("selected");

            //Delete item with DEL
            if (e.keyCode == 46)
                deleteSelectedItems();

            //Arrow up browsing
            if (e.keyCode == 38) {
                var currentElement = $(".selected").first();

                if (currentElement.length == 0) {
                    currentElement = $("#content > table > tbody tr:first").addClass("selected");
                    return;    
                }

                if (!e.shiftKey)
                    $(".selected").removeClass("selected")

                currentElement.prev().addClass("selected");
            }
            //Arrow down browsing
            if (e.keyCode == 40) {
                var currentElement = $(".selected").last();

                if (currentElement.length == 0) {
                    currentElement = $("#content > table > tbody tr:first").addClass("selected");
                    return;
                }

                if (!e.shiftKey)
                    $(".selected").removeClass("selected")
                currentElement.next().addClass("selected");
            }
		});

		$("tbody").niceScroll({cursorcolor: "#1a2326", cursorborder: "0 solid #000", scrollspeed: 40});
		$("#filetransfers").niceScroll({ cursorcolor: "#111",cursorborder: "0 solid #000"});

	});

	var refreshDirectory = function () {
		browseDirectory(viewModel.CurrentDirectory());
	};

	var disablePage = function () {
		$(".container-fluid").addClass("disabled");
		$("body").css("overflow", "hidden");
		$("#status-dialog").removeClass("invisible");
	}

	var enablePage = function () {
		$(".container-fluid").removeClass("disabled");
		$("body").css("overflow", "visible");
        $("#status-dialog").addClass("invisible");
        refreshDirectory();
	}

	var toParentDirectory = function () {
		//Prevent from browsing "lower than" the root directory
		if (viewModel.CurrentDirectory().length <= 3)
			return;
		var parentDirectory = viewModel.CurrentDirectory().substring(0, viewModel.CurrentDirectory().lastIndexOf('\\'));
		browseDirectory(parentDirectory, "Folder");
	}

    var deleteSelectedItems = function () {
        swal({
            title: 'Confirmation',
            text: 'Are you sure you want to delete the selected items?',
            type: 'warning',
            showCancelButton: true

        }).then(function () {
            $(".selected").each(function (i, obj) {
                $.when(deleteItem(viewModel.Client().ClientId, obj.id)).done(function (result) {
                    if (result == "")
                        refreshDirectory();
                    else
                        swal(result);

                });
            });
        });
    };

	ko.punches.enableAll();
	ko.applyBindings(viewModel);


	$.contextMenu({
		selector: '.file-transfer-item',
		items: {
			Clear: {
				name: "Clear",
				icon: "fa-ban",
				callback: function (key, opt) {
					viewModel.FileTransfers.removeAll();
				}
			}
		}
	});


	$.contextMenu({
		selector: '.windows-item',
		items: {
			Open: {
				name: "Open",
				icon: "fa-play-circle",
				callback: function (key, opt) {

					$(".selected").each(function (i, obj) {
						$.when(openItem(viewModel.Client().ClientId, obj.id)).done(function (result) {
							if (result != "")
								swal(result);

						});
					});
				}
			},
			Rename: {
				name: "Rename",
				icon: "fa-pencil",
				callback: function (key, opt) {
					var path = opt.$trigger[0].id;
					var fileName = getFileName(path);
					swal({
						title: 'Rename folder',
						input: 'text',
						inputValue: fileName,
						showCancelButton: true
					}).then(function (newName) {
						$.when(renameItem(viewModel.Client().ClientId, path, newName)).done(function (result) {
							if (result == "")
								refreshDirectory();
							else
								swal(result);

						});
					})
						
				}
			},
			Move: {
				name: "Move",
				icon: "fa-suitcase",
				callback: function (key, opt) {
					var path = opt.$trigger[0].id;
					swal({
						title: 'Move item',
						text: 'Enter a destination to move the item to',
						input: 'text',
						inputValue: path,
						showCancelButton: true
					}).then(function (newPath) {
						$.when(moveItem(viewModel.Client().ClientId, path, newPath)).done(function (result) {
							if (result == "")
								refreshDirectory();
							else
								swal(result);
						});
					})
				}
			},
			Delete: {
				name: "Delete",
				icon: "fa-trash",
				callback: function (key, opt) {
                    deleteSelectedItems();
				}
			},
			Upload: {
				name: "Upload to server",
				icon: "fa-upload",
				callback: function (key, opt) {
					$(".selected").each(function (i, obj) {
						uploadFile(viewModel.Client().ClientId, obj.id);
					});
					$("#filetransfers").addClass("show-filetransfers").removeClass("hide-filetransfers");
				}
			},
			Download: {
				name: "Download to client",
				icon: "fa-download",
				callback: function (key, opt) {
					
				}
			},
			CreateFile: {        
				name: "Create file",
				icon: "fa-file",
				callback: function (key, opt) {
					swal({
						title: 'Create new file',
						text: 'Enter a file name',
						input: 'text',
						showCancelButton: true
					}).then(function (fileName) {
						$.when(createFile(viewModel.Client().ClientId, viewModel.CurrentDirectory(), fileName)).done(function (result) {
							if (result == "")
								refreshDirectory();
							else
								swal(result);
						});
					})
				}
			},
			CreateFolder: {
				name: "Create folder",
				icon: "fa-folder",
				callback: function (key, opt) {
					swal({
						title: 'Create new folder',
						text: 'Enter a folder name',
						input: 'text',
						showCancelButton: true
					}).then(function (folderName) {
						$.when(createFolder(viewModel.Client().ClientId, viewModel.CurrentDirectory(), folderName)).done(function (result) {
							if (result == "")
								refreshDirectory();
							else
								swal(result);
						});
					})
				}
			},
			Reload: {
				name: "Refresh current directory",
				icon: "fa-refresh",
				callback: function (key, opt) {
					refreshDirectory();
				}
			}
		}
	});


</script>
